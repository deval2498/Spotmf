// Cleaned Prisma Schema
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String   @id @default(cuid())
  walletAddress String   @unique @map("wallet_address") @db.VarChar(42)
  createdAt     DateTime @default(now()) @map("created_at")
  updatedAt     DateTime @updatedAt @map("updated_at")

  // Profile fields
  email        String? @db.VarChar(255)
  name         String? @db.VarChar(100)
  profileImage String? @map("profile_image")
  isActive     Boolean @default(true)

  // Relations
  actionNonces ActionNonce[]
  strategies   UserStrategy[]

  @@index([walletAddress])
  @@map("users")
}

model AuthNonces {
  walletAddress String   @unique @map("wallet_address") @db.VarChar(42)
  nonce         String   @db.VarChar(64)
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at")

  @@index([expiresAt])
  @@map("auth_nonces")
}

model ActionNonce {
  id               String        @id @default(cuid())
  walletAddress    String        @map("wallet_address") @db.VarChar(42)
  nonce            String        @unique @db.VarChar(64)
  action           String        @db.VarChar(100) // 'CREATE_STRATEGY', 'UPDATE_STRATEGY', etc.
  // Normalized fields instead of JSON - MUCH BETTER!
  strategyType     STRATEGY_TYPE @map("strategy_type")
  asset            ASSET_TYPE
  intervalAmount   BigInt        @map("interval_amount") // Use BigInt for wei amounts
  intervalDays     Int           @map("interval_days")
  acceptedSlippage Decimal       @map("accepted_slippage") @db.Decimal(5, 2)
  totalAmount      BigInt        @map("total_amount")
  strategyId       String?       @map("strategy_id") // For UPDATE_STRATEGY actions
  expiresAt        DateTime      @map("expires_at")
  used             Boolean       @default(false)
  usedAt           DateTime?     @map("used_at")
  createdAt        DateTime      @default(now()) @map("created_at")

  // Relations
  user         User          @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)
  userStrategy UserStrategy? // One action nonce can create one strategy

  @@index([walletAddress, used])
  @@index([expiresAt, used])
  @@index([nonce])
  @@map("action_nonces")
}

model UserStrategy {
  id            String @id @default(cuid())
  walletAddress String @map("wallet_address") @db.VarChar(42)
  actionNonceId String @unique @map("action_nonce_id") // Links back to the action nonce

  // Transaction data (added after signing)
  signedRawTxnHash String? @map("signed_raw_txn_hash") // ERC20 approve transaction

  // Status and tracking
  status          STRATEGY_STATUS @default(PENDING)
  isActive        Boolean         @default(false)
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  lastExecutedAt  DateTime?       @map("last_executed_at")
  nextExecutionAt DateTime?       @map("next_execution_at")

  // Execution tracking
  totalExecutions    Int    @default(0) @map("total_executions")
  totalAmountSwapped BigInt @default(0) @map("total_amount_swapped")

  // Relations
  user        User                @relation(fields: [walletAddress], references: [walletAddress], onDelete: Cascade)
  actionNonce ActionNonce         @relation(fields: [actionNonceId], references: [id])
  executions  StrategyExecution[]

  @@index([walletAddress, isActive])
  @@index([status, nextExecutionAt])
  @@map("user_strategies")
}

model StrategyExecution {
  id         String @id @default(cuid())
  strategyId String @map("strategy_id")

  // Execution details
  executedAt      DateTime         @default(now()) @map("executed_at")
  transactionHash String?          @map("transaction_hash") // Actual blockchain txn hash
  status          EXECUTION_STATUS @default(PENDING)

  // Trade details
  amountIn       BigInt   @map("amount_in") // Amount of input token
  amountOut      BigInt?  @map("amount_out") // Amount of output token received
  actualSlippage Decimal? @map("actual_slippage") @db.Decimal(5, 2)
  gasUsed        BigInt?  @map("gas_used")
  gasPriceUsed   BigInt?  @map("gas_price_used")

  // Error handling
  errorMessage String? @map("error_message")
  retryCount   Int     @default(0) @map("retry_count")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  strategy UserStrategy @relation(fields: [strategyId], references: [id], onDelete: Cascade)

  @@index([strategyId, executedAt])
  @@index([status, executedAt])
  @@index([transactionHash])
  @@map("strategy_executions")
}

model PriceCache {
  id        String     @id @default(cuid())
  asset     ASSET_TYPE
  price     String     @db.VarChar(50) // Store as string to avoid precision issues
  source    String     @db.VarChar(20) // 'UNISWAP_V3', 'COINGECKO', etc.
  timestamp DateTime   @default(now())
  createdAt DateTime   @default(now()) @map("created_at")

  @@index([asset, timestamp])
  @@index([asset, source])
  @@map("price_cache")
}

model HistoricalPrice {
  id        String     @id @default(cuid())
  asset     ASSET_TYPE
  date      DateTime   @db.Date // Only date, no time
  price     String     @db.VarChar(50) // Daily closing price
  source    String     @default("UNISWAP_V3") @db.VarChar(20)
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @updatedAt @map("updated_at")

  @@unique([asset, date], name: "asset_date")
  @@index([asset])
  @@index([date])
  @@map("historical_prices")
}

// Enums
enum STRATEGY_TYPE {
  DCA // Dollar Cost Averaging
  DCA_WITH_DMA // DCA with 200-day moving average filter
}

enum ASSET_TYPE {
  BTC
  ETH
  HYPE
}

enum STRATEGY_STATUS {
  PENDING // Waiting for transaction confirmation
  ACTIVE // Running and executing
  PAUSED // Temporarily stopped
  COMPLETED // Finished (manual stop or limit reached)
  FAILED // Failed to activate (transaction failed)
}

enum EXECUTION_STATUS {
  PENDING // Scheduled but not executed
  EXECUTING // Transaction sent to blockchain
  SUCCESS // Successfully executed
  FAILED // Failed execution
  RETRYING // Failed but retrying
}
