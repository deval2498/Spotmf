// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  //output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id               String          @id @default(cuid())
  walletAddress    String          @unique @map("wallet_address") @db.VarChar(42)
  createdAt        DateTime        @default(now()) @map("created_at")
  updatedAt        DateTime        @default(now()) @map("updated_at")
  // profile fields
  email            String?         @db.VarChar(255)
  name             String?         @db.VarChar(100)
  profileImage     String?
  isActive         Boolean         @default(false)
  funds            Funds[]
  activeStrategies User_Strategy[]

  @@index([walletAddress])
  @@map("users")
}

model Funds {
  id              String  @id @default(cuid())
  contractAddress String  @map("contract_address")
  amount          BigInt  @default(0)
  txReceipt       String  @map("tx_receipt")
  contractName    String? @map("contract_name")
  contractSymbol  String? @map("contract_symbol")
  walletAddress   String
  User            User    @relation(fields: [walletAddress], references: [walletAddress])
}

model AuthNonces {
  walletAddress String   @unique @map("wallet_address") @db.VarChar(42)
  nonce         String   @db.VarChar(64)
  expiresAt     DateTime @map("expires_at")
  createdAt     DateTime @default(now()) @map("created_at") @db.Timestamptz

  @@index([expiresAt])
  @@map("auth_nonces")
}

model ActionNonce {
  id            String    @id @default(cuid())
  walletAddress String    @map("wallet_address") @db.VarChar(42)
  nonce         String    @unique @db.VarChar(64)
  action        String    @db.VarChar(100)
  actionData    Json?     @map("action_data") // For storing action-specific data
  expiresAt     DateTime  @map("expires_at")
  used          Boolean   @default(false)
  usedAt        DateTime? @map("used_at")
  createdAt     DateTime  @default(now()) @map("created_at")

  @@index([walletAddress, nonce, used]) // Better composite for main query
  @@index([expiresAt, used]) // Better for cleanup
  @@index([walletAddress, used])
  @@index([nonce])
  @@index([expiresAt])
  @@map("action_nonces")
}

model Strategy {
  id             String          @id @default(cuid())
  type           STRATEGY_TYPE   @unique
  userStrategies User_Strategy[]
}

model User_Strategy {
  id               String     @id @default(cuid())
  strategyId       String
  strategy         Strategy   @relation(fields: [strategyId], references: [id])
  asset            ASSET_TYPE
  intervalAmount   BigInt     @map("interval_amount")
  intervalDays     Decimal    @map("interval_days")
  acceptedSlippage Decimal    @default(1.0) @map("accepted_slippage") // 1% default
  isActive         Boolean    @default(true)
  createdAt        DateTime   @default(now()) @map("created_at")
  lastExecutedAt   DateTime?  @map("last_executed_at")
  User             User       @relation(fields: [walletAddress], references: [walletAddress])
  walletAddress    String

  @@map("user_strategies")
}

model PriceCache {
  id        String   @id @default(cuid())
  asset     String // 'UBTC', 'WBTC', 'WHYPE'
  assetName String   @map("asset_name")
  price     String   @db.VarChar(50) // Store as string to avoid precision issues
  source    String   @db.VarChar(10) // 'DEX', 'API'
  timestamp DateTime @default(now())
  createdAt DateTime @default(now()) @map("created_at")

  @@index([asset, timestamp])
  @@index([asset, source])
  @@index([timestamp])
  @@map("price_cache")
}

model HistoricalPrice {
  id        String   @id @default(cuid())
  asset     String   @db.VarChar(10) // 'UBTC', 'WBTC', 'WHYPE'
  assetName String   @map("asset_name")
  date      DateTime
  price     String   @db.VarChar(50) // Daily closing price
  source    String   @default("DEX") @db.VarChar(10) // 'DEX', 'API'
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  @@unique([asset, date], name: "asset_date") // One price per asset per day
  @@index([asset])
  @@index([asset, source])
  @@index([date])
  @@map("historical_prices")
}

enum STRATEGY_TYPE {
  SIMPLE
  DMA_200
}

enum ASSET_TYPE {
  BTC
  ETH
  HYPE
}
